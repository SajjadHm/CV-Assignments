# -*- coding: utf-8 -*-
"""CV_CHW5_Q2_SajjadHashembeiki_98107077_(2) (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZrVVAZyxUPxCRDHHS6zgP6fTQlwbbCsg

# Part A
"""

# # Install the libraries
# !pip install roboflow
# !pip install ultralytics
# !pip install openai

# Import libraries
import cv2
import time

import numpy as np
import matplotlib.pyplot as plt

from PIL import Image
from openai import OpenAI
from roboflow import Roboflow
from ultralytics import YOLO

# Import dataset from Roboflow
rf = Roboflow(api_key="q6PLubqHIh5BdWdu6ClJ")
project = rf.workspace("calorie-xclip").project("-970ur")
dataset = project.version(4).download("yolov8")

"""# Part B"""

# Load a pretraind model for detection
model = YOLO('yolov8n.pt', 'detect')

# Train the model
results = model.train(data="/content/음식-이미지-분류-4/data.yaml", epochs=20,
                      device=0, half=False)

"""# Part C"""

# Load the best model
best_model = YOLO('/content/runs/detect/train/weights/best.pt')

# Validate the model
val_metrics = best_model.val(split = 'val')

# Store the MAPs
map50_95 = val_metrics.box.map.round(3)
map50 = val_metrics.box.map50.round(3)
map75 = val_metrics.box.map75.round(3)

# Report model performance on validation set
print('Valdation Performance:')
print(f' MAP50-95:{map50_95}\n MAP50:{map50}\n MAP75:{map75}')

# Test the model
test_metrics = best_model.val(split = 'test')

# Store the MAPs
map50_95 = test_metrics.box.map.round(3)
map50 = test_metrics.box.map50.round(3)
map75 = test_metrics.box.map75.round(3)

# Report model performance on testset
print('Test Performance:')
print(f' MAP50-95:{map50_95}\n MAP50:{map50}\n MAP75:{map75} ')

# Get inference time(ms) per image
inference_time = test_metrics.speed['inference']

# Calculate FPS
test_fps = round(1000/inference_time, 3)

# Report the FPS
print(f'Model FPS: {test_fps} fps')

"""# Part D"""

# Prediction on the test.jpg
results = best_model('test.jpg')

# Save the result
for r in results:

    # Plot Bbox, prob, and label on the image
    im_array = r.plot()
    im = Image.fromarray(im_array[..., ::-1])

    # save image
    im.save('result.jpg')

# Load result image
result_image = cv2.imread('result.jpg')

# Convert to RGB
result_image = cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB)

# Show result image
plt.imshow(result_image)
plt.axis('off')

# Save the predicted label in food_name
food_name = r.names[r.boxes.cls[0].cpu().item()].replace('_',' ')

"""# Part E"""

# Create a prompt string
prompt = f'How to make a delicious {food_name}? give me a full recipe.'

# Show prompt
print(f'Prompt: {prompt}')

# Chat-GPT API configs
client = OpenAI(
    api_key="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")


# A function for get the prompt and print the responce
def chat_gpt(prompt):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}])

    return response.choices[0].message.content.strip()

# Lets make a delicious dish!
prompt = 'How to make Marinated seasoning crab? give me a full recipe.'
print(chat_gpt(prompt))