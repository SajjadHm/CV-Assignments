# -*- coding: utf-8 -*-
"""CV_CHW4_Q3_SajjadHashembeiki_98107077.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eehkiLpkECaBLaRJ0Lph-S_yJDsXk1ez
"""

# Import libraries
import cv2

import numpy as np
import matplotlib.pyplot as plt

from sklearn.neighbors import kneighbors_graph
from sklearn.cluster import AgglomerativeClustering
from sklearn.feature_extraction.image import grid_to_graph

# Load the image
image = cv2.imread('image.jpg')

# convert to RGB format
image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)

# Plot the image
plt.imshow(image)
plt.axis('off')
plt.show()

"""### Part 1:

**Linkage:** The linkage criterion determines which distance to use between sets of observation. The algorithm will merge the pairs of cluster that minimize this criterion.



**Types of Linkage:**
- Ward: Minimizes the variance of the clusters being merged.

- Average: Uses the average of the distances of each observation of the two sets.

- Complete: Uses the maximum distances between all observations of the two sets.

- Single: Uses the minimum of the distances between all observations of the two sets.

### Part 2:
"""

# Conver to RGB and GRAY
image_rgb = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
image_gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

# Reshape the image
X = np.reshape(image_rgb, (-1, 3))

# Use grid_to_graph to determine the connectivity
connectivity = grid_to_graph(*image_gray.shape)

# Define the number of clusters
n_clusters = 2

# Create an instance of the model
model = AgglomerativeClustering(
    n_clusters=n_clusters, linkage="ward", connectivity=connectivity)

# Fit the model
model.fit(X)

# Reshape the pixels label
label = np.reshape(model.labels_, image_gray.shape)

# Plot the label
plt.imshow(label)
plt.axis('off')
plt.figure()

# Plot the image
plt.imshow(image_rgb)

# Draw contours
for l in range(n_clusters):
    plt.contour(
        label == l,colors=[plt.cm.nipy_spectral(l / float(n_clusters)),],)
plt.axis("off")
plt.show()

"""### Part 3:"""

# Loop through the number of clusters from 2 to 9
for i in range(2,10):

    # create an instance of the model
    model = AgglomerativeClustering(
        n_clusters=i, linkage="ward", connectivity=connectivity)

    # Fit the model
    model.fit(X)

    # Reshape the pixels label
    label = np.reshape(model.labels_, image_gray.shape)

    # Plot the label
    plt.imshow(label)
    plt.title(f'Number of Clusters:{i}')
    plt.axis('off')
    plt.figure()

    # Plot the image
    plt.imshow(image_rgb)

    # Draw contours
    for l in range(n_clusters):
        plt.contour(
            label == l,colors=[plt.cm.nipy_spectral(l / float(n_clusters)),],)
    plt.axis("off")
    plt.show()
    plt.figure()

"""به ازای هیچ کدام از حالت های کلاسترینگ فرد به طور کامل سگمنت نمیشود اما از بین این 8 حالت، با تعداد کلاستر 8 نتیجه از بقیه حالت ها نسبتا بهتر است.

البته از هفت تا کلاستر به بعد نتایج سگمنتشن برای شخص خیلی شبیه به هم میباشد.
"""

